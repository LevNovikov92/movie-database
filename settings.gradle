/**
 * application module contains app-scope entities and resolves DI dependencies.
 *
 * Module can have any kind of dependencies since resolving DI
 */
include ':app', ':feature-date-selector', ':res-movies_list', ':feature-list_of_films'

/**
 * feature-level modules contain feature business logic, UI and specific domain related repositories.
 * Level will be changed frequently. Every changing should be approved by feature-owner.
 *
 * Modules can have data-level, system-level dependencies, special core-level (utils) and
 * intermediate-level dependencies
 */
include ':feature-movies_list', ':feature-movie_details'

/**
 * data-level modules contain shareable data repositories (domain specific repos should be on feature-level)
 * This level is more stable that feature-level but still will be changed frequently.
 * Changes should get related feature-owners agreements.
 *
 * Modules can have core-level and system-level dependencies
 */
include ':data-movies'

/**
 * intermediate-level serve to call/use one feature from another.
 * Module should be very light-weight to improve build time since many feature-modules
 * will be depend on. To allow parallel work module should be compiled very fast.
 *
 * Modules should not have project dependencies
 */
include ':intermediate-common'

/**
 * core-level contains stable modules with critical functionality. Should have
 * special reasons to change since all app will be affected.
 * Changes should be approved by project architect.
 *
 * Modules can have only system-level dependencies
 */
include ':core-network', ':core-api', ':core-utils'

/**
 * system-level contains custom libs and solutions.
 * Changes should be approved by lib creator.
 *
 * Modules can have only system-level dependencies
 */
include ':system-lifecycle'
